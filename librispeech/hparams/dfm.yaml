# ############################################################################
# Model: E2E ASR with Transformer
# Encoder: HyperConformer Encoder
# Decoder: Transformer Decoder + (CTC/ATT joint) beamsearch + TransformerLM
# Tokens: unigram
# losses: CTC + KLdiv (Label Smoothing loss)
# Training: Librispeech 960h
# Authors:  Juan Pablo Zuluaga, Florian Mai, Titouan Parcollet
# ############################################################################
# Seed needs to be set at top of yaml, before objects with parameters are made

seed: 7775
__set_seed: !apply:speechbrain.utils.seed_everything [!ref <seed>]
trial_id: default_dfm
output_folder: !ref results/<trial_id>/<seed>
output_wer_folder: !ref <output_folder>/
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt
codec_cache: audio_cache/codecs

# Language model (LM) pretraining
# NB: To avoid mismatch, the speech recognizer must be trained with the same
# tokenizer used for LM training. Here, we download everything from the
# speechbrain HuggingFace repository. However, a local path pointing to a
# directory containing the lm.ckpt and tokenizer.ckpt may also be specified
# instead. E.g if you want to use your own LM / tokenizer.
pretrained_lm_tokenizer_path: speechbrain/asr-transformer-transformerlm-librispeech

# Data files
data_folder: /store/store4/data/LibriSpeech/
# If RIRS_NOISES dir exists in /localscratch/xxx_corpus/RIRS_NOISES
# then data_folder_rirs should be /localscratch/xxx_corpus
# otherwise the dataset will automatically be downloaded
# data_folder_rirs: !ref <data_folder>
train_splits: ["finetuning-9h"] #, "train-clean-360", "train-other-500"]
dev_splits: ["finetuning-10m"]
test_splits: ["dev-clean"] #["test-clean"] #, "test-other"]
skip_prep: False
train_csv: !ref <output_folder>/train.csv
valid_csv: !ref <output_folder>/finetuning-10m.csv
test_csv:
    - !ref <output_folder>/finetuning-10m.csv
    # - !ref <output_folder>/test-clean.csv
    # - !ref <output_folder>/test-other.csv

####################### Training Parameters ####################################

# To make Transformers converge, the global bath size should be large enough.
# The global batch size is computed as batch_size * n_gpus * grad_accumulation_factor.
# Empirically, we found that this value should be >= 128.
# Please, set your parameters accordingly.
number_of_epochs: 10
batch_size: 16 # This works for 2x GPUs with 32GB
batch_size_eval: 24 # This works for 2x GPUs with 32GB
ctc_weight: 0.3
grad_accumulation_factor: 1
max_grad_norm: 5.0
loss_reduction: 'batchmean'
sorting: random
num_workers: 2
ckpt_interval_minutes: 15 # save checkpoint every N min
avg_checkpoints: 10 # Number of checkpoints to average for evaluation

# stages related parameters
lr_adam: 3e-4

# Feature parameters
sample_rate: 16000
n_fft: 400
n_mels: 80

# This setup works well for a P40 24GB GPU, adapt it to your needs.
# Or turn it off (but training speed will decrease)
dynamic_batching: false
max_batch_length_train: 200
max_batch_length_val: 100 # we reduce it as the beam is much wider (VRAM)
num_bucket: 200
shuffle: True # if true re-creates batches at each epoch shuffling examples.
max_batch_ex: 128
batch_ordering: random

dynamic_batch_sampler_train:
    max_batch_length: !ref <max_batch_length_train>
    num_buckets: !ref <num_bucket>
    shuffle: !ref <shuffle>
    batch_ordering: !ref <batch_ordering>
    max_batch_ex: !ref <max_batch_ex>

dynamic_batch_sampler_valid:
    max_batch_length: !ref <max_batch_length_val>
    num_buckets: !ref <num_bucket>
    shuffle: !ref <shuffle>
    batch_ordering: !ref <batch_ordering>
    max_batch_ex: !ref <max_batch_ex>


# Dataloader options
train_dataloader_opts:
    batch_size: !ref <batch_size>
    shuffle: True
    num_workers: !ref <num_workers>

valid_dataloader_opts:
    batch_size: !ref <batch_size_eval>

test_dataloader_opts:
    batch_size: !ref <batch_size_eval>

####################### Model Parameters #######################################

# Transformer
d_model: 384
nhead: 6
n_blocks: 4
cond_dim: 128
transformer_dropout: 0.0
activation: !name:torch.nn.GELU
output_neurons: 16384
# specify 'hypermixing' for usage of multi-head HyperMixer instead of MultiHeadAttention
# You can also specify RelPosMHAXL for conformer
attention_type: hypermixing

# option 1) 'conformer' for HyperConformer; option 2) 'transformer' for vanilla HyperMixer
encoder_module: conformer

# Outputs
blank_index: 0
label_smoothing: 0.0
pad_index: 0
bos_index: 1
eos_index: 2

# Decoding parameters
min_decode_ratio: 0.0
max_decode_ratio: 1.0
valid_search_interval: 50
valid_beam_size: 10
test_beam_size: 66
lm_weight: 0.60
ctc_weight_decode: 0.40

repeat_tokens_n: 0
codebook_layer: 0
exponent: 1
time_epsilon: 0
sampling_steps: 1024
scheduler: !new:flow_matching.path.scheduler.PolynomialConvexScheduler
    n: !ref <exponent>
path: !new:flow_matching.path.MixtureDiscreteProbPath
    scheduler: !ref <scheduler>

############################## Models ##########################################

Transformer: !new:model.transformer.Transformer
    vocab_size: !ref <output_neurons>
    masked: false
    hidden_size: !ref <d_model>
    cond_dim: !ref <cond_dim>
    length: 1024
    n_blocks: !ref <n_blocks>
    n_heads: !ref <nhead>
    dropout: !ref <transformer_dropout>

tokenizer: !new:sentencepiece.SentencePieceProcessor

ctc_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <output_neurons>

seq_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <output_neurons>

normalize: !new:speechbrain.processing.features.InputNormalization
    norm_type: global
    update_until_epoch: 4

modules:
    Transformer: !ref <Transformer>

model: !new:torch.nn.ModuleList
    - [!ref <Transformer>, !ref <seq_lin>, !ref <ctc_lin>]

# define two optimizers here for two-stage training
Adam: !name:torch.optim.Adam
    lr: !ref <lr_adam>
    # betas: (0.9, 0.95)
    # eps: 1e-8
    # weight_decay: 0.03

####################### Decoding & optimiser ###########################

log_softmax: !new:torch.nn.LogSoftmax
    dim: -1

# loss_fn: !new:flow_matching.loss.MixturePathGeneralizedKL
#     path: !ref <path>
#     reduction: mean

loss_fn: !new:torch.nn.CrossEntropyLoss

ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
    blank_index: !ref <blank_index>
    reduction: !ref <loss_reduction>

seq_cost: !name:speechbrain.nnet.losses.kldiv_loss
    label_smoothing: !ref <label_smoothing>
    reduction: !ref <loss_reduction>

noam_annealing: !new:speechbrain.nnet.schedulers.CyclicCosineScheduler
    lr_initial: !ref <lr_adam>
    n_warmup_steps: 5000

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        noam_scheduler: !ref <noam_annealing>
        normalizer: !ref <normalize>
        counter: !ref <epoch_counter>

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

############################## Augmentations ###################################

# Speed perturbation
# speed_perturb: !new:speechbrain.augment.time_domain.SpeedPerturb
#     orig_freq: !ref <sample_rate>
#     speeds: [95, 100, 105]
#
# # Time Drop
# time_drop: !new:speechbrain.augment.freq_domain.SpectrogramDrop
#     drop_length_low: 15
#     drop_length_high: 25
#     drop_count_low: 4
#     drop_count_high: 4
#     replace: "mean"
#
# # Freq Drop
# freq_drop: !new:speechbrain.augment.freq_domain.SpectrogramDrop
#     drop_length_low: 10
#     drop_length_high: 20
#     drop_count_low: 4
#     drop_count_high: 4
#     replace: "mean"
#     dim: 2
#
# # Time warp
# time_warp: !new:speechbrain.augment.freq_domain.Warping

# fea_augment: !new:speechbrain.augment.augmenter.Augmenter
#     min_augmentations: 3
#     max_augmentations: 3
#     augment_prob: 1.0
#     augmentations: [
#         !ref <time_drop>,
#         !ref <freq_drop>,
#         !ref <time_warp>]

compute_features: !new:speechbrain.lobes.features.Fbank
    sample_rate: !ref <sample_rate>
    n_fft: !ref <n_fft>
    n_mels: !ref <n_mels>

############################## Logging and Pretrainer ##########################

train_logger: !new:speechbrain.utils.train_logger.WandBLogger
    initializer: !name:wandb.init
    project: dfmasr
    name: !ref <trial_id>
    config:
      lr: !ref <lr_adam>
      train_splits: !ref <train_splits>
      dev_splits: !ref <dev_splits>
      test_splits: !ref <test_splits>

error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
acc_computer: !name:speechbrain.utils.Accuracy.AccuracyStats

pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
    collect_in: !ref <save_folder>
    loadables:
        tokenizer: !ref <tokenizer>
    paths:
        tokenizer: !ref <pretrained_lm_tokenizer_path>/tokenizer.ckpt

codec: !new:integrations.codec.DualCodec
    n_quantizers: 1
    sample_rate: !ref <sample_rate>
